function [v0,vf] = lambert_curtis(r0,rf,tof,mu,grade)
% Curtis formulation of Lambert problem (TPBVP)
% INPUT
%   r0 : initial position 1x3 array [km]
%   rf : final position 1x3 array [km]
%   tof : time of flight [sec]
%   mu : gravitational parameter [km^3/s^2]
%   grade : (string) 'prograde' or 'retrograde'
% OUTPUT
%   v0 : initial velocity 1x3 array [km/s]
%   vf : final velocity 1x3 array [km/s]
% ====================================================== %

% compute angular separation
dtheta = acos(dot(r1,r2)/(norm(r1)*norm(r2)));
c12 = cross(r1,r2);

% update dtheta for special cases
if grade == 'retrograde'
    if c12(2) >= 0
        dtheta = 2*pi - dtheta;
    end
else
    if c12(2) <= 0
        dtheta = 2*pi - dtheta;
    end
end

% compue input parameter A
A = sin(dtheta) * sqrt( norm(r1)*norm(r2) / (1-cos(dtheta)) );
fprintf('A = %f\',A)

% find initial value of z
z = -100;
if fobj(z,tof,mu) < 0
    fprintf('z = %f, F = %f\n',z,F(z,t))
    z = z + 0.1;
end
fprintf('Initial guess of z: %f\n',z)

% set error tolerance and limit of number of iterations
tol   = 1.e-8;
nmax  = 5000;
% initialize
ratio = 0;
n = 1;
% solve with newton-raphson method
while abs(ratio) > tol
    fprintf('Current iteration: %d\n',n)
    fprintf('F: %f\n',fobj(z,tof,mu))
    fprintf('dFdz: %f\n',dfobj(z,A))
    ratio = fbobj(z,tof,mu)/dfobj(z,A);
    % iterate value of z with newton-raphson
    z     = z - ratio;
    fprintf('z: %f\n',z)
    if n > nmax
        break
    end
    n = n + 1;
end

%...Iterate on Equation 5.45 until z is determined to within the
%...error tolerance:
ratio = 1;
n     = 0;



end

        
        